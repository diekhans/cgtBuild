import os
import sys
sys.path.append(os.path.abspath("btools/lib"))

#FIXME: env = Environment(tools=['default', 'textfile', 'symlink'], toolpath=["btools/lib/scons"])
env = Environment(tools=['default', 'textfile'])

centos6DevBin = "/opt/rh/devtoolset-3/root/usr/bin"

c99Flags = ["-std=c99"]
cxx11Flags = ["-std=c++11"]
warnOps = ["-Wall", "--pedantic", "-Wno-error=unused-result"]
if os.path.exists(centos6DevBin):
    # hgwdev, use -Werror here
    werror = ["-Werror"]
    werror = []  # FIXME
    env.Replace(CC=os.path.join(centos6DevBin, "gcc"))
    env.Append(CFLAGS=c99Flags + warnOps + werror)
    env.Replace(CXX=os.path.join(centos6DevBin, "g++"))
    env.Append(CXXFLAGS=cxx11Flags + warnOps + werror)
elif os.uname()[0] == "Darwin":
    # Mac
    env.Replace(CC="clang")
    env.Append(CFLAGS=c99Flags + warnOps)
    env.Replace(CXX="clang++")
    env.Append(CXXFLAGS=cxx11Flags + warnOps)
else:
    # modern linux
    env.Replace(CC= "gcc")
    env.Append(CFLAGS=c99Flags + warnOps)
    env.Replace(CXX="g++")
    env.Append(CXXFLAGS=cxx11Flags + warnOps)

# use C++ to link, as we have C++ modules
env.Replace(LINK=env['CXX'])

SConscript("mods/sonLib/sconscript", exports=("env"),
           variant_dir="build/sonLib", duplicate=False)
SConscript("mods/cPecan/sconscript", exports=("env"),
           variant_dir="build/cPecan", duplicate=False)
#SConscript("mods/cactus/sconscript", exports=("env"),
#           variant_dir="build/cactus", duplicate=False)

# empty top level python package
#env.Textfile(target=os.path.join(variantDir, "lib/py/cgt/__init__.py"),
#             source=[])
             
